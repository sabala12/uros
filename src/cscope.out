cscope 15 $HOME/Dev/uros/src               0000025739
	@arch/x86_64/bootparam.h

1 #i‚de‡
_ASM_X86_BOOTPARAM_H


2 
	#_ASM_X86_BOOTPARAM_H


	)

4 
uöt8_t
 
	t__u8
;

5 
uöt16_t
 
	t__u16
;

6 
uöt32_t
 
	t__u32
;

7 
uöt64_t
 
	t__u64
;

10 
	#SETUP_NONE
 0

	)

11 
	#SETUP_E820_EXT
 1

	)

12 
	#SETUP_DTB
 2

	)

13 
	#SETUP_PCI
 3

	)

14 
	#SETUP_EFI
 4

	)

15 
	#SETUP_APPLE_PROPERTIES
 5

	)

18 
	#RAMDISK_IMAGE_START_MASK
 0x07FF

	)

19 
	#RAMDISK_PROMPT_FLAG
 0x8000

	)

20 
	#RAMDISK_LOAD_FLAG
 0x4000

	)

23 
	#LOADED_HIGH
 (1<<0)

	)

24 
	#KASLR_FLAG
 (1<<1)

	)

25 
	#QUIET_FLAG
 (1<<5)

	)

26 
	#KEEP_SEGMENTS
 (1<<6)

	)

27 
	#CAN_USE_HEAP
 (1<<7)

	)

30 
	#XLF_KERNEL_64
 (1<<0)

	)

31 
	#XLF_CAN_BE_LOADED_ABOVE_4G
 (1<<1)

	)

32 
	#XLF_EFI_HANDOVER_32
 (1<<2)

	)

33 
	#XLF_EFI_HANDOVER_64
 (1<<3)

	)

34 
	#XLF_EFI_KEXEC
 (1<<4)

	)

36 #i‚de‡
__ASSEMBLY__


39 
	s£tup_d©a
 {

40 
__u64
 
	m√xt
;

41 
__u32
 
	mty≥
;

42 
__u32
 
	mÀn
;

43 
__u8
 
	md©a
[0];

46 
	s£tup_hódî
 {

47 
__u8
 
	m£tup_£˘s
;

48 
__u16
 
	mroŸ_Êags
;

49 
__u32
 
	msyssize
;

50 
__u16
 
	møm_size
;

51 
__u16
 
	mvid_mode
;

52 
__u16
 
	mroŸ_dev
;

53 
__u16
 
	mboŸ_Êag
;

54 
__u16
 
	mjump
;

55 
__u32
 
	mhódî
;

56 
__u16
 
	mvîsi⁄
;

57 
__u32
 
	mªÆmode_swtch
;

58 
__u16
 
	m°¨t_sys_£g
;

59 
__u16
 
	mkî√l_vîsi⁄
;

60 
__u8
 
	mty≥_of_lﬂdî
;

61 
__u8
 
	mlﬂdÊags
;

62 
__u16
 
	m£tup_move_size
;

63 
__u32
 
	mcode32_°¨t
;

64 
__u32
 
	mømdisk_image
;

65 
__u32
 
	mømdisk_size
;

66 
__u32
 
	mboŸ£˘_kludge
;

67 
__u16
 
	mhóp_íd_±r
;

68 
__u8
 
	mext_lﬂdî_vî
;

69 
__u8
 
	mext_lﬂdî_ty≥
;

70 
__u32
 
	mcmd_löe_±r
;

71 
__u32
 
	möôrd_addr_max
;

72 
__u32
 
	mkî√l_Æignmít
;

73 
__u8
 
	mªloˇèbÀ_kî√l
;

74 
__u8
 
	mmö_Æignmít
;

75 
__u16
 
	mxlﬂdÊags
;

76 
__u32
 
	mcmdlöe_size
;

77 
__u32
 
	mh¨dw¨e_sub¨ch
;

78 
__u64
 
	mh¨dw¨e_sub¨ch_d©a
;

79 
__u32
 
	m∑ylﬂd_off£t
;

80 
__u32
 
	m∑ylﬂd_Àngth
;

81 
__u64
 
	m£tup_d©a
;

82 
__u64
 
	m¥ef_addªss
;

83 
__u32
 
	möô_size
;

84 
__u32
 
	mh™dovî_off£t
;

85 } 
__©åibuã__
((
∑cked
));

87 
	ssys_desc_èbÀ
 {

88 
__u16
 
	mÀngth
;

89 
__u8
 
	mèbÀ
[14];

93 
	sﬁpc_ofw_hódî
 {

94 
__u32
 
	mofw_magic
;

95 
__u32
 
	mofw_vîsi⁄
;

96 
__u32
 
	mcif_h™dÀr
;

97 
__u32
 
	múq_desc_èbÀ
;

98 } 
__©åibuã__
((
∑cked
));

100 
	sefi_öfo
 {

101 
__u32
 
	mefi_lﬂdî_sig«tuª
;

102 
__u32
 
	mefi_sy°ab
;

103 
__u32
 
	mefi_memdesc_size
;

104 
__u32
 
	mefi_memdesc_vîsi⁄
;

105 
__u32
 
	mefi_memm≠
;

106 
__u32
 
	mefi_memm≠_size
;

107 
__u32
 
	mefi_sy°ab_hi
;

108 
__u32
 
	mefi_memm≠_hi
;

115 
	#E820_MAX_ENTRIES_ZEROPAGE
 128

	)

120 
	sboŸ_e820_íåy
 {

121 
__u64
 
	maddr
;

122 
__u64
 
	msize
;

123 
__u32
 
	mty≥
;

124 } 
__©åibuã__
((
∑cked
));

	@arch/x86_64/core/fault.cpp

	@arch/x86_64/core/fault.h

1 #i‚de‡
UROS_FAULT_H


2 
	#UROS_FAULT_H


	)

4 
	~<¨ch/x86_64/c‹e/°ub.h
>

6 
	$Áu…_h™dÀr
()

8 
	}
}

	@arch/x86_64/core/stub.h

1 #i‚de‡
UROS_STUB_H


2 
	#UROS_STUB_H


	)

4 
	#ASM_DECLARE_FUNC
(
__func
) \

7 #__fun¯":\n"

	)

9 
	#PUSH_ALL_REGS
() \

25 

	)

26 
	#POP_ALL_REGS
() \

42 

	)

43 
	#exe˝ti⁄_°ub
(
func
);

	)

45 
	#öãºu±_°ub
(
func
) \

46 
func
 ## 
	`_°ub
(); \

47 
	`func
(
ªgs_t
 *
ªgs
Ë
	`__©åibuã__
((
u£d
)); \

48 
	`asm
 ( \

50 
	`ASM_DECLARE_FUNC
(
func
 ## 
_°ub
) \

52 
	`PUSH_ALL_REGS
() \

61 
	`POP_ALL_REGS
() \

74 ".¥evious\n")

	)

	@arch/x86_64/idt.cpp

1 
	~<¨ch/x86_64/idt.h
>

3 
	~<utûs/fmt.h
>

4 
	~<drivîs/vga.h
>

6 
	~<¨ch/x86_64/c‹e/Áu….h
>

7 
	~<¨ch/x86_64/c‹e/°ub.h
>

9 
	#SET_BIT
(
n
Ë(1ULL <<Ç)

	)

11 
	#BITMASK_1_BYTES
 (
	`SET_BIT
(8Ë- 1)

	)

12 
	#BITMASK_2_BYTES
 (
	`SET_BIT
(16Ë- 1)

	)

13 
	#BITMASK_4_BYTES
 (
	`SET_BIT
(32Ë- 1)

	)

16 
idt_h™dÀr
 
	gidt_h™dÀr_¨r
[
IDT_ENTRIES_LEN
];

21 
idt_desc_t
 
	gidt_desc_¨r
[
IDT_ENTRIES_LEN
];

25 
ty≥_©å_t
 
	gidt_ty≥_©å
 = {

27 .
g©e_ty≥
 = 
INTERRUPT_GATE_TYPE
,

28 .
	g°‹age_£gmít
 = 
NO_STORAGE_SEGMENT
,

29 .
	gd∂
 = 
DPL_ZERO
,

30 .
	g¥e£¡
 = 
PRESENT_ENTRY
,

33 
£À˘‹_t
 
	gidt_£À˘‹
 = {

34 .
d∂
 = 
DPL_ZERO
,

35 .
	gèbÀ
 = 
GDT_SELECTOR
,

36 .
	goff£t
 = 8,

39 
i°_t
 
	gidt_i°
 = {

40 .
off£t
 = 0,

44 
	#idt_£t_©å
(
desc
) do { \

45 (
desc
)->
ty≥_©å
 = 
idt_ty≥_©å
; \

46 (
desc
)->
£À˘‹
 = 
idt_£À˘‹
; \

47 (
desc
)->
i°
 = 
idt_i°
; \

48 } 0)

	)

50 
	#idt_£t_h™dÀr
(
desc
, 
h™dÀr
) do { \

51 
u64
 
h™dÀr_
 = (u64)
h™dÀr
; \

52 (
desc
)->
off£t_1
 = (
h™dÀr_
 >> 0 ) & 
BITMASK_2_BYTES
; \

53 (
desc
)->
off£t_2
 = (
h™dÀr_
 >> 16Ë& 
BITMASK_2_BYTES
; \

54 (
desc
)->
off£t_3
 = (
h™dÀr_
 >> 32Ë& 
BITMASK_4_BYTES
; \

55 } 0)

	)

57 
	#f‹óch_idt_íåy
(
i_
, 
code_
) do { \

58 
i_
 = 0; \

59 
i_
 = 0; i_ < 
IDT_ENTRIES_LEN
; i_++) { \

60 
code_
 \

62 } 0)

	)

64 
öãºu±_°ub
(
Áu…_h™dÀr
);

66 
	#°ub_by_vec
(
func
, 
vec
Ë
	`asm
 ("push %0; jm∞"#func""::"i"(()(vec)));

	)

68 
u8
 
idt_h™dÀr_£˘0
[], 
idt_h™dÀr_£˘1
[];

69 
	$idt_dummy_öãºu±_£˘i⁄
()

71 
asm
 volatile("idt_handler_sect0:");

72 
	#CI
(
i
Ë
	`°ub_by_vec
(
Áu…_h™dÀr_°ub
, i)

	)

73 
	`CI
(0);

74 
asm
 volatile("idt_handler_sect1:");

75 
	#CI1
(
x
Ë
	`CI
(x); CI(x+1);

	)

76 
	#CI2
(
x
Ë
	`CI1
(x); CI1(x+2);

	)

77 
	#CI3
(
x
Ë
	`CI2
(x); CI2(x+4);

	)

78 
	#CI4
(
x
Ë
	`CI3
(x); CI3(x+8);

	)

79 
	#CI5
(
x
Ë
	`CI4
(x); CI4(x+16);

	)

80 
	#CI6
(
x
Ë
	`CI5
(x); CI5(x+32);

	)

81 
	#CI7
(
x
Ë
	`CI6
(x); CI6(x+64);

	)

82 
	#CI8
(
x
Ë
	`CI7
(x); CI7(x+128);

	)

83 
	`CI8
(1);

84 
	}
}

86 
	$idt_assign_h™dÀr
(
idt_h™dÀr
 
h™dÀr
, 
íåy_num
)

88 
	`idt_£t_h™dÀr
(&
idt_desc_¨r
[
íåy_num
], 
h™dÀr
);

89 
	}
}

91 
	$idt_öô
()

93 
i
;

94 
h™dÀr_size
;

96 
h™dÀr_size
 = ((
u64
)
idt_h™dÀr_£˘1
 - (u64)
idt_h™dÀr_£˘0
);

97 
	`f‹óch_idt_íåy
(
i
, {

99 
idt_h™dÀr
 
h™dÀr
 = (idt_h™dÀr)(
idt_h™dÀr_£˘0
 + (
i
 * 
h™dÀr_size
));

102 
	`idt_£t_©å
(&
idt_desc_¨r
[
i
]);

103 
	`idt_£t_h™dÀr
(&
idt_desc_¨r
[
i
], 
h™dÀr
);;

105 
	}
}

	@arch/x86_64/idt.h

1 #i‚de‡
UROS_IDT_H


2 
	#UROS_IDT_H


	)

4 
	~<libc/ty≥s.h
>

6 
	#NO_STORAGE_SEGMENT
 0

	)

7 
	#PRESENT_ENTRY
 1

	)

9 
	#GDT_SELECTOR
 0

	)

10 
	#LDT_SELECTOR
 1

	)

12 
	#DPL_ZERO
 0

	)

13 
	#DPL_ONE
 1

	)

14 
	#DPL_TWO
 2

	)

15 
	#DPL_THREE
 3

	)

17 
	#INTERRUPT_GATE_TYPE
 0xE

	)

18 
	#INTERRUPT_TRAP_TYPE
 0xF

	)

20 
	#IDT_ENTRIES_LEN
 32

	)

27 (*
	tidt_h™dÀr
)(
	tve˘‹
);

29 
	sty≥_©å
 {

30 
u8
 
g©e_ty≥
:4;

31 
u8
 
°‹age_£gmít
:1;

32 
u8
 
d∂
:2;

33 
u8
 
¥e£¡
:1;

34 } 
	tty≥_©å_t
;

36 
	s£À˘‹
 {

37 
u16
 
d∂
:2;

38 
u16
 
èbÀ
:1;

39 
u16
 
off£t
:13;

40 } 
	t£À˘‹_t
;

42 
	si°
 {

43 
u8
 
off£t
:3;

44 } 
	ti°_t
;

46 
	sidt_desc
 {

47 
u16
 
off£t_1
;

48 
£À˘‹_t
 
£À˘‹
;

49 
i°_t
 
i°
;

50 
ty≥_©å_t
 
ty≥_©å
;

51 
u16
 
off£t_2
;

52 
u32
 
off£t_3
;

53 
u32
 
zîo
;

54 } 
	t__©åibuã__
((
	t∑cked
)Ë
	tidt_desc_t
;

56 
	`idt_öô
();

57 
	`idt_assign_h™dÀr
(
idt_h™dÀr
 
h™dÀr
, 
íåy_num
);

	@arch/x86_64/main64.cpp

1 #i‡
deföed
(
__löux__
)

5 
	~<utûs/fmt.h
>

6 
	~<drivîs/vga.h
>

7 
	~<¨ch/x86_64/boŸ∑øm.h
>

8 
	~<¨ch/x86_64/idt.h
>

10 
u64
 
p4_èbÀ
;

12 "C" 
	$maö64
(
£tup_hódî
* 
mbh
)

14 
fmt
::
	`¥öt
("uros kernel boot");

15 
fmt
::
	`¥öt
("øm_size=0x%x", 
mbh
->
øm_size
);

17 
	`vga_öô
();

19 
	`idt_öô
();

22 
	}
}

	@drivers/vga.cpp

1 
	~<drivîs/vga.h
>

3 
u16
* 
	gm_buf„r
 = (u16*)0xB8000;

4 
c⁄°ex¥
 
size_t
 
	gm_width
 = 80;

5 
c⁄°ex¥
 
size_t
 
	gm_height
 = 25;

6 
c⁄°ex¥
 
	gm_bœnk
 = ' ';

7 
c⁄°ex¥
 
size_t
 
	gœ°_löe
 = 
m_width
 - 1;

9 
u8
 
	gm_cﬁ‹
;

10 
u32
 
	gm_row
;

11 
u32
 
	gm_cﬁ
;

13 
	$£t_cﬁ‹
(
vga_cﬁ‹
 
fg
, vga_cﬁ‹ 
bg
)

15 
m_cﬁ‹
 = 
fg
 | 
bg
 << 4;

16 
	}
}

18 
u16
 
	$vga_íåy
(
uc
, 
u8
 
cﬁ‹
)

20  (
u16
Ë
uc
 | (u16Ë
cﬁ‹
 << 8;

21 
	}
}

23 
	$ªad_ch¨
(
size_t
 
row
, size_à
cﬁ
)

25 c⁄° 
size_t
 
ödex
 = (
row
 * 
m_width
Ë+ 
cﬁ
;

26  
m_buf„r
[
ödex
];

27 
	}
}

29 
	$wrôe_ch¨
(
size_t
 
row
, size_à
cﬁ
, 
c
)

31 c⁄° 
size_t
 
ödex
 = (
row
 * 
m_width
Ë+ 
cﬁ
;

32 
m_buf„r
[
ödex
] = 
	`vga_íåy
(
c
, 
m_cﬁ‹
);

33 
	}
}

35 
	$˛ór_row
(
size_t
 
row
)

37 
size_t
 
cﬁ
 = 0; cﬁ < 
m_width
; col++)

38 
	`wrôe_ch¨
(
row
, 
cﬁ
, 
m_bœnk
);

39 
	}
}

41 
	$shi·_löe
()

43 
size_t
 
row
 = 1;Ñow < 
m_height
;Ñow++)

45 
size_t
 
cﬁ
 = 0; cﬁ < 
m_width
; col++)

47 
c
 = 
	`ªad_ch¨
(
row
, 
cﬁ
);

48 
	`wrôe_ch¨
(
row
 - 1, 
cﬁ
, 
c
);

52 
	`˛ór_row
(
œ°_löe
);

53 
m_cﬁ
 = 0;

54 
	}
}

56 
	$√w_löe
()

58 
m_row
++;

59 
m_cﬁ
 = 0;

60 
	}
}

62 
boﬁ
 
	$is_√w_löe
(c⁄° * 
°r
, 
size_t
 
i
)

64  
°r
[
i
] == '\n';

65 
	}
}

67 
	$check_shi·
()

69 i‡(
m_cﬁ
 =
m_width
)

71 i‡(
m_row
 =
œ°_löe
) {

72 
	`shi·_löe
();

74 
	`√w_löe
();

77 
	}
}

79 
	$put_ch¨
(c⁄° 
c
)

81 
	`check_shi·
();

82 
	`wrôe_ch¨
(
m_row
, 
m_cﬁ
, 
c
);

83 
m_cﬁ
++;

84 
	}
}

86 
	$˛ór_s¸ìn
()

88 
size_t
 
row
 = 0;Ñow < 
m_height
;Ñow++)

89 
	`˛ór_row
(
row
);

91 
m_row
 = 0;

92 
m_cﬁ
 = 0;

93 
	}
}

95 
	$vga_öô
()

97 
	`˛ór_s¸ìn
();

98 
	`£t_cﬁ‹
(
Gªí
, 
Bœck
);

99 
	}
}

	@drivers/vga.h

1 #i‚de‡
UROS_VGA_H


2 
	#UROS_VGA_H


	)

4 
	~<libc/ty≥s.h
>

6 
	evga_cﬁ‹


8 
	mBœck
 = 0,

9 
	mBlue
 = 1,

10 
	mGªí
 = 2,

11 
	mCy™
 = 3,

12 
	mRed
 = 4,

13 
	mMagíè
 = 5,

14 
	mBrown
 = 6,

15 
	mLightGøy
 = 7,

16 
	mD¨kGøy
 = 8,

17 
	mLightBlue
 = 9,

18 
	mLightGªí
 = 10,

19 
	mLightCy™
 = 11,

20 
	mLightRed
 = 12,

21 
	mPök
 = 13,

22 
	mYñlow
 = 14,

23 
	mWhôe
 = 15,

26 
£t_cﬁ‹
(
vga_cﬁ‹
 
fg
, vga_cﬁ‹ 
bg
);

28 
u16
 
vga_íåy
(
uc
, 
u8
 
cﬁ‹
);

29 
ªad_ch¨
(
size_t
 
row
, size_à
cﬁ
);

30 
wrôe_ch¨
(
size_t
 
row
, size_à
cﬁ
, 
c
);

31 
˛ór_row
(
size_t
 
row
);

32 
shi·_löe
();

33 
√w_löe
();

34 
boﬁ
 
is_√w_löe
(c⁄° * 
°r
, 
size_t
 
i
);

35 
check_shi·
();

36 
put_ch¨
(c⁄° 
c
);

38 
	sRëTrue


40 
boﬁ
 
›î©‹
()(c⁄° * 
	m°r
, 
size_t
 
	mi
)

42 ()
	m°r
;

43 ()
	mi
;

44  
	måue
;

48 
	gãm∂©e
 <
ty≥«me
 
	gC⁄dôi⁄
>

49 
	$wrôe_°r
(c⁄° * 
°r
, 
C⁄dôi⁄
& 
c⁄dôi⁄
)

51 
size_t
 
i
 = 0;

52 
°r
[
i
] && 
	`c⁄dôi⁄
(str, i))

54 i‡(
	`is_√w_löe
(
°r
, 
i
)) {

55 
	`√w_löe
();

57 
	`put_ch¨
(
°r
[
i
]);

59 
i
++;

61 
	}
}

63 
	gãm∂©e
 <
˛ass
 
	gC⁄dôi⁄
>

64 
	$vga_wrôe
(c⁄° * 
°r
, 
C⁄dôi⁄
& 
c⁄dôi⁄
)

66 
	`wrôe_°r
(
°r
, 
c⁄dôi⁄
);

67 
	}
}

69 
	$vga_wrôe
(c⁄° * 
°r
)

71 
RëTrue
 
ªtTrue
;

72 
	`wrôe_°r
(
°r
, 
ªtTrue
);

73 
	}
}

75 
vga_öô
();

	@libc/types.h

5 #i‚de‡
UROS_TYPES_H


6 
	#UROS_TYPES_H


	)

8 
	~<°ddef.h
>

9 
	~<°döt.h
>

11 
uöt8_t
 
	tu8
;

12 
uöt16_t
 
	tu16
;

13 
uöt32_t
 
	tu32
;

14 
uöt64_t
 
	tu64
;

	@utils/fmt.h

1 #i‚def 
UROS_FMT_H


2 
	#UROS_FMT_H


	)

4 
	~<drivîs/vga.h
>

5 
	~<utûs/¥öt_ty≥.h
>

7 
«me•a˚
 
	gfmt


9 
	gãm∂©e
 <
ty≥«me
 
	gT
>

10 
ölöe
 
size_t
 
h™dÀ_f‹m©_sign
(c⁄° * 
fmt
, 
T
 
¨g
)

13 i‡(
	gfmt
[0] == 'd') {

14 
¥öt_dec
(
¨g
);

18 i‡(
	gfmt
[0] == 'x') {

19 
¥öt_hex
(
¨g
);

24 i‡(
	gfmt
[0])

25 
vga_wrôe
("%");

31 
	sSt›AtPî˚¡Sign


33 
St›AtPî˚¡Sign
()

34 : 
m_cou¡
(0) { }

36 
ölöe
 
boﬁ
 
›î©‹
()(c⁄° * 
°r
, 
size_t
 
	gi
)

38 
	gm_cou¡
++;

39  
	g°r
[
i
] != '%';

42 
size_t
 
	gm_cou¡
;

45 
ölöe
 
¥öt
(c⁄° * 
fmt
)

47 
vga_wrôe
(
fmt
);

48 
vga_wrôe
("\n");

51 
	gãm∂©e
 <
ty≥«me
 
	gA
, 
	gty≥«me
... 
	gN
>

52 
ölöe
 
¥öt
(c⁄° * 
fmt
, 
A
 
¨g_a
, 
N
... 
¨g_n
)

55 
St›AtPî˚¡Sign
 
	gc⁄dôi⁄
;

56 
vga_wrôe
(
fmt
, 
c⁄dôi⁄
);

59 i‡(!
	gc⁄dôi⁄
.
	gm_cou¡
)

63 i‡(
	gfmt
[
c⁄dôi⁄
.
m_cou¡
 - 1] == '%' &&

64 !
fmt
[
c⁄dôi⁄
.
m_cou¡
])

65 
vga_wrôe
("%");

68 
size_t
 
	g¨g_Àn
 = 
h™dÀ_f‹m©_sign
(
fmt
 + 
c⁄dôi⁄
.
m_cou¡
, 
¨g_a
);

70 i‡(
	g¨g_Àn
) {

72 
¥öt
(
fmt
 + 
c⁄dôi⁄
.
m_cou¡
 + 
¨g_Àn
, 
¨g_n
...);

75 
¥öt
(
fmt
 + 
c⁄dôi⁄
.
m_cou¡
 + 
¨g_Àn
, 
¨g_a
, 
¨g_n
...);

	@utils/print_type.h

5 #i‚de‡
UROS_PRINT_TYPE_H


6 
	#UROS_PRINT_TYPE_H


	)

8 
	~<libc/ty≥s.h
>

10 
«me•a˚
 
	gfmt


12 
	gãm∂©e
<
ty≥«me
 
	gT
>

13 
ölöe
 
¥öt_dec
(
T
 
vÆ
);

14 
	gãm∂©e
<
ty≥«me
 
	gT
>

15 
ölöe
 
¥öt_hex
(c⁄° 
T
* 
vÆ
);

16 
	gãm∂©e
<
ty≥«me
 
	gT
>

17 
ölöe
 
¥öt_°r
(c⁄° 
T
& 
vÆ
);

19 
	gãm∂©e
<
ty≥«me
 
	gT
>

20 
ölöe
 
¥öt_dec
(
T
 
vÆ
)

22 c⁄° *
	gm≠
[10] = {

27 i‡(
	gvÆ
 < 0) {

28 
vga_wrôe
("-");

29 
	gvÆ
 *= -1;

32 i‡(
	gvÆ
 == 0) {

33 
vga_wrôe
(
m≠
[
vÆ
]);

37 
	gÀn
 = 0;

38 c⁄° 
	gmax_Àngth
 = 9;

39 
u8
 
	g°r
[
max_Àngth
];

41 
	gvÆ
 != 0) {

42 
u8
 
v
 = 
vÆ
 % 10;

43 
	g°r
[
Àn
] = 
v
;

44 
	gÀn
++;

45 
	gvÆ
 /= 10;

48 ; 
	gÀn
 > 0;Üen--) {

49 
vga_wrôe
(
m≠
[
°r
[
Àn
-1]]);

53 
ölöe
 
¥öt_hex_c
(
u8
 
vÆ
)

55 c⁄° 
	gm≠
[] = "0123456789abcdef";

56 
	ghex
[] = "0";

57 
	ghex
[0] = 
m≠
[
vÆ
 & 0xF];

58 
vga_wrôe
(
hex
);

61 
	gãm∂©e
 <
ty≥«me
 
	gT
>

62 
ölöe
 
¥öt_hex
(
T
 
vÆ
)

64 
u64
 
	g_vÆ
 = (u64)
vÆ
;

65 i‡(
	g_vÆ
 == 0) {

66 
vga_wrôe
("0");

70 
	gÀn
 = 0;

71 c⁄° 
	gmax_Àngth
 = 16;

72 
u8
 
	g°r
[
max_Àngth
];

74 
	g_vÆ
 != 0) {

75 
°r
[
Àn
] = 
_vÆ
 & 0xF;

76 
	gÀn
++;

77 
	g_vÆ
 = 
_vÆ
 >> 4;

81 ; 
	gÀn
 > 0;Üen--) {

82 
¥öt_hex_c
(
°r
[
Àn
-1]);

86 
	gãm∂©e
<
ty≥«me
 
	gT
>

87 
ölöe
 
¥öt_°r
(c⁄° 
T
& 
vÆ
)

89 ()
	gvÆ
;

92 
	gãm∂©e
 <
ty≥«me
 
	gT
>

93 
ölöe
 
¥öt_dec
(
T
* 
vÆ
)

95 ()
	gvÆ
;

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


149 #unde‡
_DEFAULT_SOURCE


150 
	#_DEFAULT_SOURCE
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_ISOC11_SOURCE


160 
	#_ISOC11_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_DEFAULT_SOURCE


172 
	#_DEFAULT_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
))

184 #unde‡
_DEFAULT_SOURCE


185 
	#_DEFAULT_SOURCE
 1

	)

189 #i‡(
deföed
 
_ISOC11_SOURCE
 \

190 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

191 
	#__USE_ISOC11
 1

	)

195 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

196 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

197 
	#__USE_ISOC99
 1

	)

201 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

202 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

203 
	#__USE_ISOC95
 1

	)

210 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

211 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

212 
	#__USE_ISOCXX11
 1

	)

218 #ifde‡
_DEFAULT_SOURCE


219 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


220 
	#__USE_POSIX_IMPLICITLY
 1

	)

222 #unde‡
_POSIX_SOURCE


223 
	#_POSIX_SOURCE
 1

	)

224 #unde‡
_POSIX_C_SOURCE


225 
	#_POSIX_C_SOURCE
 200809L

	)

227 #i‡((!
deföed
 
__STRICT_ANSI__
 \

228 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

229 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

230 
	#_POSIX_SOURCE
 1

	)

231 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

232 
	#_POSIX_C_SOURCE
 2

	)

233 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

234 
	#_POSIX_C_SOURCE
 199506L

	)

235 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

236 
	#_POSIX_C_SOURCE
 200112L

	)

238 
	#_POSIX_C_SOURCE
 200809L

	)

240 
	#__USE_POSIX_IMPLICITLY
 1

	)

243 #i‡(
deföed
 
_POSIX_SOURCE
 \

244 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

245 || 
deföed
 
_XOPEN_SOURCE
)

246 
	#__USE_POSIX
 1

	)

249 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


250 
	#__USE_POSIX2
 1

	)

253 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

254 
	#__USE_POSIX199309
 1

	)

257 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

258 
	#__USE_POSIX199506
 1

	)

261 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

262 
	#__USE_XOPEN2K
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

270 
	#__USE_XOPEN2K8
 1

	)

271 #unde‡
_ATFILE_SOURCE


272 
	#_ATFILE_SOURCE
 1

	)

275 #ifdef 
_XOPEN_SOURCE


276 
	#__USE_XOPEN
 1

	)

277 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

278 
	#__USE_XOPEN_EXTENDED
 1

	)

279 
	#__USE_UNIX98
 1

	)

280 #unde‡
_LARGEFILE_SOURCE


281 
	#_LARGEFILE_SOURCE
 1

	)

282 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

283 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

284 
	#__USE_XOPEN2K8
 1

	)

285 
	#__USE_XOPEN2K8XSI
 1

	)

287 
	#__USE_XOPEN2K
 1

	)

288 
	#__USE_XOPEN2KXSI
 1

	)

289 #unde‡
__USE_ISOC95


290 
	#__USE_ISOC95
 1

	)

291 #unde‡
__USE_ISOC99


292 
	#__USE_ISOC99
 1

	)

295 #ifde‡
_XOPEN_SOURCE_EXTENDED


296 
	#__USE_XOPEN_EXTENDED
 1

	)

301 #ifde‡
_LARGEFILE_SOURCE


302 
	#__USE_LARGEFILE
 1

	)

305 #ifde‡
_LARGEFILE64_SOURCE


306 
	#__USE_LARGEFILE64
 1

	)

309 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

310 
	#__USE_FILE_OFFSET64
 1

	)

313 #i‡
deföed
 
_DEFAULT_SOURCE


314 
	#__USE_MISC
 1

	)

317 #ifdef 
_ATFILE_SOURCE


318 
	#__USE_ATFILE
 1

	)

321 #ifdef 
_GNU_SOURCE


322 
	#__USE_GNU
 1

	)

325 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


326 
	#__USE_REENTRANT
 1

	)

329 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

330 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

331 #i‡
_FORTIFY_SOURCE
 > 1

332 
	#__USE_FORTIFY_LEVEL
 2

	)

334 
	#__USE_FORTIFY_LEVEL
 1

	)

337 
	#__USE_FORTIFY_LEVEL
 0

	)

342 
	~<°dc-¥edef.h
>

350 #unde‡
__GNU_LIBRARY__


351 
	#__GNU_LIBRARY__
 6

	)

355 
	#__GLIBC__
 2

	)

356 
	#__GLIBC_MINOR__
 24

	)

358 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

359 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

362 #i‚de‡
__ASSEMBLER__


363 #i‚de‡
_SYS_CDEFS_H


364 
	~<sys/cdefs.h
>

369 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


370 
	#__USE_LARGEFILE
 1

	)

371 
	#__USE_LARGEFILE64
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

57 
	#__STDC_ISO_10646__
 201605L

	)

60 
	#__STDC_NO_THREADS__
 1

	)

	@
1
.
1
/usr/include
15
308
arch/x86_64/bootparam.h
arch/x86_64/core/fault.cpp
arch/x86_64/core/fault.h
arch/x86_64/core/stub.h
arch/x86_64/idt.cpp
arch/x86_64/idt.h
arch/x86_64/main64.cpp
drivers/vga.cpp
drivers/vga.h
libc/types.h
utils/fmt.h
utils/print_type.h
/usr/include/stdint.h
/usr/include/features.h
/usr/include/stdc-predef.h
